// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// TODO: Replace with environment variables once .env.local is set up
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://xzindyqvzwbaeerlcbyx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh6aW5keXF2endiYWVlcmxjYnl4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5Mzg0ODIsImV4cCI6MjA2OTUxNDQ4Mn0.465X0mjMf6FrxZlqbl-8zmCcy5rvx3U8XQYeE82vwbg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    debug: false,
    flowType: 'pkce',
    // Fix authentication timeout issues
    storageKey: 'stoic-zenith-auth',
  },
  global: {
    headers: {
      'X-Client-Info': 'stoic-zenith-web',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
    },
    // Add fetch options for better reliability with timeout
    fetch: (url: string, options: RequestInit = {}) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

      return fetch(url, {
        ...options,
        signal: controller.signal,
      }).finally(() => clearTimeout(timeoutId));
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});